/*
*	CS440 Spring 2016
*	Lab 2
*	--------------
*	This program introduces the following concepts:
*		a) Reading a stream of images from a webcamera, and displaying the video
*		b) Skin color detection
*		c) Background differencing
*		d) Visualizing motion history
*	--------------
*/

#include "stdafx.h"
//opencv libraries
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
//C++ standard libraries
#include <iostream>
#include <vector>
#include <cmath> //so we can use abs function

using namespace cv;
using namespace std;

//function declarations
void myBackgroundDifferencing(Mat& oldframe, Mat& newframe, Mat& dst);

//global variables
Point2f startCenter; //keeps track of centroid center point
int counter = 0; //the difference between the centroids is calculated every numFrames
int numFrames = 5; //we check for centroid movement after this many frames have elapsed
int c = 5; //keeps track of which movement you did so to output the correct text

//main function
int main()
{

	//------------------------------------------------------------------------
	// Reading a stream of images from a webcamera, and displaying the video
	//------------------------------------------------------------------------
	// For more information on reading and writing video: http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html
	// open the video camera no. 0


	VideoCapture cap(0);

	// if not successful, exit program
	if (!cap.isOpened()) {
		cout << "Cannot open the video cam" << endl;
		return -1;
	}

	// Mat object to read first frame
	Mat frame0;

	// read a new frame from video
	bool bSuccess0 = cap.read(frame0);

	//if not successful, break loop
	if (!bSuccess0)
	{
		cout << "Cannot read a frame from video stream" << endl;
	}


	while (1) {
		// read a new frame from video
		Mat frame;
		bool bSuccess = cap.read(frame);

		//if not successful, break loop
		if (!bSuccess) {
			cout << "Cannot read a frame from video stream" << endl;
			break;
		}

		//-------------------------------------------------
		//	b) Skin color detection
		//-------------------------------------------------
		//found constants online
		Mat skinDest = Mat::zeros(frame.rows, frame.cols, CV_8UC1);
		Mat x;
		medianBlur(frame, frame, 9); //blurs the input image so the edges are smoother
		//use hsv if bacground black
		//cvtColor(frame, x, CV_BGR2HSV);
		//inRange(x, Scalar(0, 10, 60), Scalar(20, 150, 255), skinDest);
		//use ycrcb if background white
		cvtColor(frame, x, COLOR_BGR2YCrCb);
		inRange(x, Scalar(0, 133, 77), Scalar(255, 173, 127), skinDest);
		morphologyEx(skinDest, skinDest, MORPH_CLOSE, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
		imshow("skinDetection", skinDest);


		//Lab 3 given
		vector<vector<Point>> contours;
		vector<Vec4i> hierarchy;
		// Find contours
		// Documentation for finding contours: http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html?highlight=findcontours#findcontours
		//use the skin thresholded image to FIND the contours but DRAW the contours on the frame image
		findContours(skinDest, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));
		//cout << "The number of contours detected is: " << contours.size() << endl;

		if (contours.size() >= 1) {
			//Mat contour_output = Mat::zeros(x.size(), CV_8UC3);
			// Find largest contour
			int maxsize = 0;
			int maxind = 0;
			Rect boundrec;
			for (int i = 0; i < contours.size(); i++)
			{
				// Documentation on contourArea: http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html#
				double area = contourArea(contours[i]);
				if (area > maxsize) {
					maxsize = area;
					maxind = i;
					boundrec = boundingRect(contours[i]);
				}
			}

			// Draw contours
			// Documentation for drawing contours: http://docs.opencv.org/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html?highlight=drawcontours#drawcontours
			//drawContours(frame, contours, maxind, Scalar(255, 0, 0), CV_FILLED, 8, hierarchy);
			drawContours(frame, contours, maxind, Scalar(0, 0, 255), 2, 8, hierarchy);
			// Documentation for drawing rectangle: http://docs.opencv.org/modules/core/doc/drawing_functions.html
			rectangle(frame, boundrec, Scalar(0, 255, 0), 1, 8, 0);


			//PROBLEM WITH THIS PART OF THE CODE
			/*
			vector<int> hull; //indices of convex points if you want to use it for convexitydefects
			vector<vector<Point>> hullP(contours.size()); //its not vector<Point> because drawContour expects a 2D array
			convexHull(contours[maxind], hull, false); //returns indicies instead of Points in hull
			convexHull(contours[maxind], hullP[maxind], false); //draw contours expects an array of arrays, returns Points in hullP
			drawContours(frame, hullP, 0, Scalar(255, 0, 0), 2, 8, hierarchy);
			*/

			//USE CAN USE CONVEXITY DEFECTS AND CENTROID TO FIND OUT IF HAND ORIENTED RIGHT OR LEFT OR UP/DOWN
			//pick deepest defect (so get coordinates of defect with highest depth)
			//compare x & y coordinates with centroid x & y and depending on difference you can tell orientation

			//DO FINGER COUNTING???????????????????????

			//cout << "The area of the largest contour detected is: " << contourArea(contours[maxind]) << endl;
			//cout << "-----------------------------" << endl << endl;

			//vector<Vec4i> condefect;
			//convexityDefects(contours[maxind], hull, condefect); //get the convexity defects (points on contour that deviate from the convexity hull)

			//cout << "Normal convexity defects: " << condefect.size() << endl;
			//cout << "Normal convex hull points: " << hullP[maxind].size() << endl;

			//info: http://stackoverflow.com/questions/9074202/opencv-2-centroid
			//http://stackoverflow.com/questions/15543496/extract-data-from-point2f
			Moments u = moments(contours[maxind], false);
			Point2f center = Point2f(u.m10 / u.m00, u.m01 / u.m00); //centroid
			//center is in this form: [234.566, 283.123];
			circle(frame, center, 15, Scalar(255, 0, 0), CV_FILLED); //filled circle where there centroid is

			//code below works fine, just commented out to test other code

			if (counter == 0) {
				startCenter = center;
			}

			counter++;

			if (counter == numFrames) {
				float xDiff = center.x - startCenter.x; //change in x coordinate between start and end centroid
				float yDiff = center.y - startCenter.y; //change in y coordinate between start and end centroid

				//use absolute value for comparisions
				float xa = abs(xDiff);
				float ya = abs(yDiff);
				if ((ya > xa) && (ya - xa) > 5.0) { //up and down movement
					//5.0 is number the number of pixels the centroid should move for us to register the movement
					//lower the number the more sensitive the program is to movement
					//now determine if moving up or down
					if (yDiff > 0.0) {
						//moving down
						//use putText opencv function
						c = 0;
						cout << "MOVING DOWN" << endl;
					}
					else {
						//moving up
						cout << "MOVING UP" << endl;
						c = 1;
					}
				}
				else if ((xa > ya) && (xa - ya) > 5.0) { //left and right movement
					//now determine if moving left or right
					if (xDiff > 0.0) {
						//moving right
						c = 2;
						cout << "MOVING RIGHT" << endl;
					}
					else {
						//moving left
						c = 3;
						cout << "MOVING LEFT" << endl;
					}
				}
				else {
					//yDiff and xDiff were pretty much the same and the hand was just shaking in place
					c = 4;
					cout << "YOU DIDN'T MOVE" << endl;
				}

				counter = 0; //reset counter
			}
		}
 else {
	 c = 5;
	 cout << "NO HAND" << endl;
 }

		//output the information about your centroid movement
		if (c == 0) {
			putText(frame, "MOVED DOWN", Point(0, frame0.rows), 2, 1, Scalar(0, 255, 0), 2, 8, false);
		}
		else if (c == 1) {
			putText(frame, "MOVED UP", Point(0, frame0.rows), 2, 1, Scalar(0, 255, 0), 2, 8, false);
		}
		else if (c == 2) {
			putText(frame, "MOVED RIGHT", Point(0, frame0.rows), 2, 1, Scalar(0, 255, 0), 2, 8, false);
		}
		else if (c == 3) {
			putText(frame, "MOVED LEFT", Point(0, frame0.rows), 2, 1, Scalar(0, 255, 0), 2, 8, false);
		}
		else if (c == 4) {
			putText(frame, "YOU DIDN'T MOVE", Point(0, frame0.rows), 2, 1, Scalar(0, 255, 0), 2, 8, false);
		}
		else {
			putText(frame, "NO HAND", Point(0, frame0.rows), 2, 1, Scalar(0, 255, 0), 2, 8, false);
		}


		//outputs the frame window and any graphical changes to it
		namedWindow("Final output", CV_WINDOW_AUTOSIZE);
		imshow("Final output", frame);

		if (waitKey(30) == 27) {
			cout << "esc key is pressed by user" << endl;
			break;
		}
	}
	cap.release();
	return 0;
}
